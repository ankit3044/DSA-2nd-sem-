#include <stdio.h>
#include <math.h>
#include <ctype.h> // Added header file for isdigit() and isalpha()

#define size 100

int stack[size], top = -1;

void push(int e);
int pop();

int main(void) {
    char pe[size]; // Increased buffer size for postfix expression
    int i, v, op1, op2;
    
    printf("Enter postfix operation: ");
    fgets(pe, sizeof(pe), stdin);
    
    for (i = 0; pe[i] != '\0'; i++) {
        if (isspace(pe[i])) // Skip spaces
            continue;
        if (isalpha(pe[i])) {
            printf("\nEnter the value for %c: ", pe[i]);
            scanf("%d", &v);
            push(v);
        } else if (isdigit(pe[i]))
            push(pe[i] - '0');
        else {
            if (pe[i] == '+' || pe[i] == '-' || pe[i] == '*' || pe[i] == '/' || pe[i] == '%' || pe[i] == '^') {
                if (top < 1) {
                    printf("\nError: Insufficient operands for operator %c", pe[i]);
                    return 1; // Exit program with error
                }
                op2 = pop();
                op1 = pop();
                switch (pe[i]) {
                    case '+':
                        push(op1 + op2);
                        break;
                    case '-':
                        push(op1 - op2);
                        break;
                    case '*':
                        push(op1 * op2);
                        break;
                    case '/':
                        if (op2 != 0)
                            push(op1 / op2);
                        else {
                            printf("\nError: Division by zero!");
                            return 1; // Exit program with error
                        }
                        break;
                    case '%':
                        if (op2 != 0)
                            push(op1 % op2);
                        else {
                            printf("\nError: Modulus by zero!");
                            return 1; // Exit program with error
                        }
                        break;
                    case '^':
                        push(pow(op1, op2));
                        break;
                    default:
                        printf("\nInvalid operation");
                        return 1; // Exit program with error
                }
            } else {
                printf("\nInvalid character in postfix expression: %c", pe[i]);
                return 1; // Exit program with error
            }
        }
    }
    if (top != 0) {
        printf("\nError: Too many operands");
        return 1; // Exit program with error
    }
    printf("The result is %d\n", stack[top]);
    return 0;
}

void push(int e) {
    if (top == size - 1)
        printf("\nStack full");
    else
        stack[++top] = e;
}

int pop() {
    if (top == -1) {
        printf("\nStack is empty");
        return -1;
    } else
        return stack[top--];
}

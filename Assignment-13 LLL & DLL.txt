#include <iostream>
using namespace std;

// Node structure
struct Node {
    int data;
    Node* next;
    
    Node(int val) : data(val), next(nullptr) {}
};

// Linked list class
class LinkedList {
private:
    Node* head;
    
public:
    LinkedList() : head(nullptr) {}
    
    // Insert a node at the beginning of the list
    void insertAtBeginning(int val) {
        Node* newNode = new Node(val);
        newNode->next = head;
        head = newNode;
    }
    
    // Delete a node at the end of the list
    void deleteAtEnd() {
        if (head == nullptr) return;
        if (head->next == nullptr) {
            delete head;
            head = nullptr;
            return;
        }
        Node* prev = nullptr;
        Node* curr = head;
        while (curr->next != nullptr) {
            prev = curr;
            curr = curr->next;
        }
        delete curr;
        prev->next = nullptr;
    }
    
    // Append a node at the end of the list
    void append(int val) {
        Node* newNode = new Node(val);
        if (head == nullptr) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
    
    // Insert a node at any middle position of the list
    void insertAtMiddle(int val, int position) {
        Node* newNode = new Node(val);
        if (position == 0) {
            newNode->next = head;
            head = newNode;
            return;
        }
        Node* temp = head;
        for (int i = 0; i < position - 1 && temp != nullptr; i++) {
            temp = temp->next;
        }
        if (temp == nullptr) {
            cout << "Position out of bounds" << endl;
            return;
        }
        newNode->next = temp->next;
        temp->next = newNode;
    }
    
    // Delete a node from any middle position of the list
    void deleteAtMiddle(int position) {
        if (head == nullptr) return;
        if (position == 0) {
            Node* temp = head;
            head = head->next;
            delete temp;
            return;
        }
        Node* temp = head;
        Node* prev = nullptr;
        for (int i = 0; i < position && temp != nullptr; i++) {
            prev = temp;
            temp = temp->next;
        }
        if (temp == nullptr) {
            cout << "Position out of bounds" << endl;
            return;
        }
        prev->next = temp->next;
        delete temp;
    }
    
    // Count number of nodes present in the list
    int countNodes() {
        int count = 0;
        Node* temp = head;
        while (temp != nullptr) {
            count++;
            temp = temp->next;
        }
        return count;
    }
    
    // Find the sum of all nodes
    int sumOfNodes() {
        int sum = 0;
        Node* temp = head;
        while (temp != nullptr) {
            sum += temp->data;
            temp = temp->next;
        }
        return sum;
    }
};

int main() {
    LinkedList list;
    
    // Example usage
    list.insertAtBeginning(10);
    list.append(20);
    list.append(30);
    list.insertAtMiddle(15, 1);
    cout << "Number of nodes: " << list.countNodes() << endl;
    cout << "Sum of nodes: " << list.sumOfNodes() << endl;
    
    return 0;
}
